// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../src/generated-prisma"
}

model Budget {
  id               Int               @id @default(autoincrement())
  value            Decimal           @db.Decimal(12, 2)
  currentValue     Decimal           @db.Decimal(12, 2)
  name             String            @db.VarChar(255)
  isDeleted        Boolean           @default(false)
  type             BudgetType
  validMonth       DateTime          @db.Date
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransactions TransactionsOnBudgets[]
}

model IncomeCategory {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  icon             String            @db.VarChar(100)
  isDeleted        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransaction RecurringTransaction[]
}

model OutcomeCategory {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  icon             String            @db.VarChar(100)
  isDeleted        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransaction RecurringTransaction[]
}

model Category {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  icon             String            @db.VarChar(100)
  isDeleted        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransaction RecurringTransaction[]
  subCategories    Subcategory[]
}

model Subcategory {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  icon             String            @db.VarChar(100)
  isDeleted        Boolean           @default(false)
  category         Category          @relation(fields: [categoryId], references: [id])
  categoryId       Int
  transactions          Transaction[]
  recurringTransaction RecurringTransaction[]
}

model Currency {
  id               Int               @id @default(autoincrement())
  code             String            @unique @db.VarChar(3)
  exchangeRate     Decimal           @db.Decimal(8, 4)
  isDeleted        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransaction RecurringTransaction[]
}

model Transaction {
  id               Int             @id @default(autoincrement())
  date             DateTime        @db.Date
  note             String          @db.VarChar(255)
  amount           Decimal         @db.Decimal(12, 2)
  isDeleted        Boolean         @default(false)
  payer            Payer           @relation(fields: [payerId], references: [id])
  payerId          Int
  currency         Currency        @relation(fields: [currencyId], references: [id])
  currencyId       Int
  payFrom          Budget          @relation(fields: [budgetId], references: [id])
  budgetId         Int
  category         Category        @relation(fields: [categoryId], references: [id])
  categoryId       Int
  subcategory      Subcategory?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId    Int?
  outcomeCategory  OutcomeCategory? @relation(fields: [outcomeCategoryId], references: [id])
  outcomeCategoryId Int?
  incomeCategory   IncomeCategory? @relation(fields: [incomeCategoryId], references: [id])
  incomeCategoryId Int?
}

model RecurringTransaction {
  id                Int             @id @default(autoincrement())
  date              DateTime        @db.Date
  note              String          @db.VarChar(255)
  amount            Decimal         @db.Decimal(12, 2)
  dayOfPayment      DateTime        @db.Date
  activationDate    DateTime        @db.Date
  isDeleted         Boolean         @default(false)
  payer             Payer           @relation(fields: [payerId], references: [id])
  payerId           Int
  currency          Currency        @relation(fields: [currencyId], references: [id])
  currencyId        Int
  budgets           TransactionsOnBudgets[]
  category          Category        @relation(fields: [categoryId], references: [id])
  categoryId        Int
  subcategory       Subcategory?    @relation(fields: [subcategoryId], references: [id])
  subcategoryId     Int?
  outcomeCategory   OutcomeCategory? @relation(fields: [outcomeCategoryId], references: [id])
  outcomeCategoryId Int?
  incomeCategory    IncomeCategory? @relation(fields: [incomeCategoryId], references: [id])
  incomeCategoryId  Int?
}

model TransactionsOnBudgets {
    budget          Budget      @relation(fields: [budgetId], references: [id])
    budgetId        Int
    transaction     RecurringTransaction @relation(fields: [transactionId], references: [id])
    transactionId   Int
    createdAt       DateTime    @default(now())
    @@id([budgetId, transactionId])
}

model Payer {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.VarChar(255)
  isDeleted        Boolean           @default(false)
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions          Transaction[]
  recurringTransactions RecurringTransaction[]
}

model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  passwordHash      String
  passwordSalt      String
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  verificationToken String?
  activationStatus  ActivationStatus  @default(PENDING)
  budgets           Budget[]
  payers            Payer[]
  outcomeCategories OutcomeCategory[]
  incomeCategories  IncomeCategory[]
  categories        Category[]
  currencies        Currency[]
}

enum ActivationStatus {
    DISABLED
    PENDING
    ACTIVE
}

enum BudgetType {
    INCOME
    OUTCOME
}
